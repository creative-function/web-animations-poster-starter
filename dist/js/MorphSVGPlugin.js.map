{"version":3,"sources":["MorphSVGPlugin.js"],"names":["_PI","Math","PI","_DEG2RAD","_svgPathExp","_numbersExp","_selectorExp","_commands","_scientific","_atan2","atan2","_cos","cos","_sin","sin","_sqrt","sqrt","_2PI","_angleMin","_angleMax","_lastLinkedAnchor","TweenLite","_gsScope","_gsDefine","globals","_log","message","console","log","_arcToBeziers","lastX","lastY","rx","ry","angle","largeArcFlag","sweepFlag","x","y","abs","angleRad","cosAngle","sinAngle","dx2","dy2","x1","y1","x1_sq","y1_sq","radiiCheck","rx_sq","ry_sq","sq","coef","cx1","cy1","sx2","sy2","cx","cy","ux","uy","vx","vy","temp","angleStart","acos","angleExtent","segments","ceil","rawPath","angleIncrement","controlLength","ma","mb","mc","md","i","push","length","_stringToRawPath","d","a","replace","m","n","match","path","relativeX","relativeY","twoThirds","elements","points","errorMessage","line","sx","sy","ex","ey","difX","difY","segment","j","command","isRelative","startX","startY","beziers","prevCommand","isNaN","toUpperCase","closed","totalPoints","_subdivideSegment","quantity","tally","max","l","newPointsPerSegment","ax","ay","cp1x","cp1y","cp2x","cp2y","bx","by","x2","y2","t","floor","splice","_rawPathToString","precision","s","space","rnd","pow","_reverseBezier","reversed","_getAverageXY","_getSize","xMax","xMin","yMax","yMin","centerX","centerY","size","_getTotalSize","samplesPerBezier","inc","k","inv","x3","x4","y3","y4","left","width","top","height","_sortByComplexity","b","_sortBySize","sizeA","sizeB","_offsetSegment","shapeIndex","slice","wrap","index","_getTotalMovement","sb","eb","offsetX","offsetY","_getClosestShapeIndex","checkReverse","sCenter","eCenter","min","minIndex","copy","_getClosestAnchor","bezier","closestDistance","closestX","closestY","dx","dy","_getClosestSegment","pool","startIndex","sortRatio","minSize","_equalizeSegmentQuantity","start","end","map","fillSafe","dif","longer","shorter","added","sortMethod","shapeIndices","reverse","sort","join","_pathFilter","precompile","_offsetPoints","text","offset","parseInt","_equalizePointQuantity","parseFloat","factor","nextX","nextY","toFixed","_pointsFilter","startNums","endNums","_buildPointsFilter","_createPath","e","ignore","document","createElementNS","attr","Array","prototype","call","attributes","name","nodeName","toLowerCase","indexOf","setAttributeNS","nodeValue","_typeAttrs","rect","circle","ellipse","_attrToObj","attrs","props","split","obj","getAttribute","_convertToPath","swap","type","tagName","circ","data","r","rcirc","rycirc","w","h","x5","x6","y5","y6","getBBox","shift","setAttribute","_gsRawPath","parentNode","insertBefore","removeChild","_parseShape","shape","forcePath","target","isString","test","selector","getAttributeNS","_populateSmoothData","tolerance","limit","smooth","a2","isSmooth","smoothData","_parseOriginFactors","v","trim","_shortAngle","_morphMessage","MorphSVGPlugin","plugin","propName","API","global","version","init","value","tween","cs","nodeType","window","getComputedStyle","fill","fillRule","origins","origin","p","pt","isPoly","startSmooth","endSmooth","startSeg","endSeg","precompiled","sData","eData","originFactors","useRotation","prop","defaultMap","_prop","_render","render","defaultRender","_apply","updateTarget","defaultUpdateTarget","_rnd","_tween","_target","defaultType","smoothTolerance","_origin","_eOrigin","_rawPath","_controlPT","_next","l1s","l1c","l2s","l2c","_tweenRotation","_addTween","_overwriteProps","endProp","set","ratio","controlPT","anchorPT","_anchorPT","easeInOut","_super","setRatio","_firstPT","sa","ca","sl","cl","linkedPT","so","eo","angleDif","short","pathFilter","pointsFilter","getTotalSize","subdivideRawBezier","subdivideSegment","rawPathToString","stringToRawPath","pathDataToRawBezier","equalizeSegmentQuantity","convertToPath","targets","pathDataToBezier","vars","prefix","matrix","bbox","align","relative","default"],"mappings":"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","file":"MorphSVGPlugin.js","sourcesContent":["/*!\n * VERSION: 0.9.1\n * DATE: 2019-02-21\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.\n * MorphSVGPlugin is a Club GreenSock membership benefit; You must have a valid membership to use\n * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.\n * This work is subject to the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\n/* eslint-disable */\n\nimport { _gsScope } from \"gsap/TweenLite.js\";\n\n\tvar _PI = Math.PI,\n\t\t_DEG2RAD = _PI / 180,\n\t\t_svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t_numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t_selectorExp = /(^[#\\.][a-z]|[a-y][a-z])/gi,\n\t\t_commands = /[achlmqstvz]/ig,\n\t\t_scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n\t\t_atan2 = Math.atan2,\n\t\t_cos = Math.cos,\n\t\t_sin = Math.sin,\n\t\t_sqrt = Math.sqrt,\n\t\t_2PI = _PI * 2,\n\t\t_angleMin = _PI * 0.3,\n\t\t_angleMax = _PI * 0.7,\n\t\t_lastLinkedAnchor,\n\t\tTweenLite = _gsScope._gsDefine.globals.TweenLite,\n\n\t\t_log = function(message) {\n\t\t\tif (_gsScope.console) {\n\t\t\t\tconsole.log(message);\n\t\t\t}\n\t\t},\n\n\t\t// translates SVG arc data into an array of cubic beziers\n\t\t_arcToBeziers = function(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n\t\t\tif (lastX === x && lastY === y) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trx = Math.abs(rx);\n\t\t\try = Math.abs(ry);\n\t\t\tvar angleRad = (angle % 360) * _DEG2RAD,\n\t\t\t\tcosAngle = _cos(angleRad),\n\t\t\t\tsinAngle = _sin(angleRad),\n\t\t\t\tdx2 = (lastX - x) / 2,\n\t\t\t\tdy2 = (lastY - y) / 2,\n\t\t\t\tx1 = (cosAngle * dx2 + sinAngle * dy2),\n\t\t\t\ty1 = (-sinAngle * dx2 + cosAngle * dy2),\n\t\t\t\tx1_sq = x1 * x1,\n\t\t\t\ty1_sq = y1 * y1,\n\t\t\t\tradiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);\n\t\t\tif (radiiCheck > 1) {\n\t\t\t\trx = _sqrt(radiiCheck) * rx;\n\t\t\t\try = _sqrt(radiiCheck) * ry;\n\t\t\t}\n\t\t\tvar rx_sq = rx * rx,\n\t\t\t\try_sq = ry * ry,\n\t\t\t\tsq = ((rx_sq * ry_sq) - (rx_sq * y1_sq) - (ry_sq * x1_sq)) / ((rx_sq * y1_sq) + (ry_sq * x1_sq));\n\t\t\tif (sq < 0) {\n\t\t\t\tsq = 0;\n\t\t\t}\n\t\t\tvar coef = ((largeArcFlag === sweepFlag) ? -1 : 1) * _sqrt(sq),\n\t\t\t\tcx1 = coef * ((rx * y1) / ry),\n\t\t\t\tcy1 = coef * -((ry * x1) / rx),\n\t\t\t\tsx2 = (lastX + x) / 2,\n\t\t\t\tsy2 = (lastY + y) / 2,\n\t\t\t\tcx = sx2 + (cosAngle * cx1 - sinAngle * cy1),\n\t\t\t\tcy = sy2 + (sinAngle * cx1 + cosAngle * cy1),\n\t\t\t\tux = (x1 - cx1) / rx,\n\t\t\t\tuy = (y1 - cy1) / ry,\n\t\t\t\tvx = (-x1 - cx1) / rx,\n\t\t\t\tvy = (-y1 - cy1) / ry,\n\t\t\t\ttemp = ux * ux + uy * uy,\n\t\t\t\tangleStart = ((uy < 0) ? -1 : 1) * Math.acos(ux / _sqrt(temp)),\n\t\t\t\tangleExtent = ((ux * vy - uy * vx < 0) ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));\n\t\t\tif (!sweepFlag && angleExtent > 0) {\n\t\t\t\tangleExtent -= _2PI;\n\t\t\t} else if (sweepFlag && angleExtent < 0) {\n\t\t\t\tangleExtent += _2PI;\n\t\t\t}\n\t\t\tangleStart %= _2PI;\n\t\t\tangleExtent %= _2PI;\n\t\t\tvar segments = Math.ceil(Math.abs(angleExtent) / (_2PI / 4)),\n\t\t\t\trawPath = [],\n\t\t\t\tangleIncrement = angleExtent / segments,\n\t\t\t\tcontrolLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),\n\t\t\t\tma = cosAngle * rx,\n\t\t\t\tmb = sinAngle * rx,\n\t\t\t\tmc = sinAngle * -ry,\n\t\t\t\tmd = cosAngle * ry,\n\t\t\t\ti;\n\t\t\tfor (i = 0; i < segments; i++) {\n\t\t\t\tangle = angleStart + i * angleIncrement;\n\t\t\t\tx1 = _cos(angle);\n\t\t\t\ty1 = _sin(angle);\n\t\t\t\tux = _cos(angle += angleIncrement);\n\t\t\t\tuy = _sin(angle);\n\t\t\t\trawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);\n\t\t\t}\n\t\t\t//now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).\n\t\t\tfor (i = 0; i < rawPath.length; i+=2) {\n\t\t\t\tx1 = rawPath[i];\n\t\t\t\ty1 = rawPath[i+1];\n\t\t\t\trawPath[i] = x1 * ma + y1 * mc + cx;\n\t\t\t\trawPath[i+1] = x1 * mb + y1 * md + cy;\n\t\t\t}\n\t\t\trawPath[i-2] = x; //always set the end to exactly where it's supposed to be\n\t\t\trawPath[i-1] = y;\n\t\t\treturn rawPath;\n\t\t},\n\n\t\t//Spits back an array of cubic Bezier segments that use absolute coordinates. Each segment starts with a \"moveTo\" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.\n\t\t_stringToRawPath = function(d) {\n\t\t\tvar a = (d + \"\").replace(_scientific, function(m) { var n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n\t\t\t\tpath = [],\n\t\t\t\trelativeX = 0,\n\t\t\t\trelativeY = 0,\n\t\t\t\ttwoThirds = 2 / 3,\n\t\t\t\telements = a.length,\n\t\t\t\tpoints = 0,\n\t\t\t\terrorMessage = \"ERROR: malformed path: \" + d,\n\t\t\t\tline = function(sx, sy, ex, ey) {\n\t\t\t\t\tdifX = (ex - sx) / 3;\n\t\t\t\t\tdifY = (ey - sy) / 3;\n\t\t\t\t\tsegment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);\n\t\t\t\t},\n\t\t\t\ti, j, x, y, command, isRelative, segment, startX, startY, difX, difY, beziers, prevCommand;\n\t\t\tif (!d || !isNaN(a[0]) || isNaN(a[1])) {\n\t\t\t\t_log(errorMessage);\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\tfor (i = 0; i < elements; i++) {\n\t\t\t\tprevCommand = command;\n\t\t\t\tif (isNaN(a[i])) {\n\t\t\t\t\tcommand = a[i].toUpperCase();\n\t\t\t\t\tisRelative = (command !== a[i]); //lower case means relative\n\t\t\t\t} else { //commands like \"C\" can be strung together without any new command characters between.\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t\tx = +a[i + 1];\n\t\t\t\ty = +a[i + 2];\n\t\t\t\tif (isRelative) {\n\t\t\t\t\tx += relativeX;\n\t\t\t\t\ty += relativeY;\n\t\t\t\t}\n\t\t\t\tif (!i) {\n\t\t\t\t\tstartX = x;\n\t\t\t\t\tstartY = y;\n\t\t\t\t}\n\n\t\t\t\t// \"M\" (move)\n\t\t\t\tif (command === \"M\") {\n\t\t\t\t\tif (segment) {\n\t\t\t\t\t\tif (segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n\t\t\t\t\t\t\tpath.length -= 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpoints += segment.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trelativeX = startX = x;\n\t\t\t\t\trelativeY = startY = y;\n\t\t\t\t\tsegment = [x, y];\n\t\t\t\t\tpath.push(segment);\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcommand = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n\n\t\t\t\t// \"C\" (cubic bezier)\n\t\t\t\t} else if (command === \"C\") {\n\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\tsegment = [0, 0];\n\t\t\t\t\t}\n\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t}\n\t\t\t\t\t//note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n\t\t\t\t\tsegment.push(x,\ty, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, (relativeX += a[i + 5] * 1),\t(relativeY += a[i + 6] * 1));\n\t\t\t\t\ti += 6;\n\n\t\t\t\t// \"S\" (continuation of cubic bezier)\n\t\t\t\t} else if (command === \"S\") {\n\t\t\t\t\tdifX = relativeX;\n\t\t\t\t\tdifY = relativeY;\n\t\t\t\t\tif (prevCommand === \"C\" || prevCommand === \"S\") {\n\t\t\t\t\t\tdifX += relativeX - segment[segment.length - 4];\n\t\t\t\t\t\tdifY += relativeY - segment[segment.length - 3];\n\t\t\t\t\t}\n\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t}\n\t\t\t\t\tsegment.push(difX, difY, x,\ty, (relativeX += a[i + 3] * 1), (relativeY += a[i + 4] * 1));\n\t\t\t\t\ti += 4;\n\n\t\t\t\t// \"Q\" (quadratic bezier)\n\t\t\t\t} else if (command === \"Q\") {\n\t\t\t\t\tdifX = relativeX + (x - relativeX) * twoThirds;\n\t\t\t\t\tdifY = relativeY + (y - relativeY) * twoThirds;\n\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t}\n\t\t\t\t\trelativeX += a[i + 3] * 1;\n\t\t\t\t\trelativeY += a[i + 4] * 1;\n\t\t\t\t\tsegment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);\n\t\t\t\t\ti += 4;\n\n\t\t\t\t// \"T\" (continuation of quadratic bezier)\n\t\t\t\t} else if (command === \"T\") {\n\t\t\t\t\tdifX = relativeX - segment[segment.length - 4];\n\t\t\t\t\tdifY = relativeY - segment[segment.length - 3];\n\t\t\t\t\tsegment.push(relativeX + difX, relativeY + difY, x + ((relativeX + difX * 1.5) - x) * twoThirds, y + ((relativeY + difY * 1.5) - y) * twoThirds, (relativeX = x), (relativeY = y));\n\t\t\t\t\ti += 2;\n\n\t\t\t\t// \"H\" (horizontal line)\n\t\t\t\t} else if (command === \"H\") {\n\t\t\t\t\tline(relativeX, relativeY, (relativeX = x), relativeY);\n\t\t\t\t\ti += 1;\n\n\t\t\t\t// \"V\" (vertical line)\n\t\t\t\t} else if (command === \"V\") {\n\t\t\t\t\t//adjust values because the first (and only one) isn't x in this case, it's y.\n\t\t\t\t\tline(relativeX, relativeY, relativeX, (relativeY = x + (isRelative ? relativeY - relativeX : 0)));\n\t\t\t\t\ti += 1;\n\n\t\t\t\t// \"L\" (line) or \"Z\" (close)\n\t\t\t\t} else if (command === \"L\" || command === \"Z\") {\n\t\t\t\t\tif (command === \"Z\") {\n\t\t\t\t\t\tx = startX;\n\t\t\t\t\t\ty = startY;\n\t\t\t\t\t\tsegment.closed = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (command === \"L\" || Math.abs(relativeX - x) > 0.5 || Math.abs(relativeY - y) > 0.5) {\n\t\t\t\t\t\tline(relativeX, relativeY, x, y);\n\t\t\t\t\t\tif (command === \"L\") {\n\t\t\t\t\t\t\ti += 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trelativeX = x;\n\t\t\t\t\trelativeY = y;\n\n\t\t\t\t// \"A\" (arc)\n\t\t\t\t} else if (command === \"A\") {\n\t\t\t\t\tbeziers = _arcToBeziers(relativeX, relativeY, +a[i+1], +a[i+2], +a[i+3], +a[i+4], +a[i+5], (isRelative ? relativeX : 0) + a[i+6]*1, (isRelative ? relativeY : 0) + a[i+7]*1);\n\t\t\t\t\tif (beziers) {\n\t\t\t\t\t\tfor (j = 0; j < beziers.length; j++) {\n\t\t\t\t\t\t\tsegment.push(beziers[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trelativeX = segment[segment.length-2];\n\t\t\t\t\trelativeY = segment[segment.length-1];\n\t\t\t\t\ti += 7;\n\n\t\t\t\t} else {\n\t\t\t\t\t_log(errorMessage);\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = segment.length;\n\t\t\tif (segment[0] === segment[i-2] && segment[1] === segment[i-1]) {\n\t\t\t\tsegment.closed = true;\n\t\t\t}\n\t\t\tpath.totalPoints = points + i;\n\t\t\treturn path;\n\t\t},\n\n\t\t//adds a certain number of Beziers while maintaining the path shape (so that the start/end values can have a matching quantity of points to animate). Only pass in ONE segment of the Bezier at a time. Format: [xAnchor, yAnchor, xControlPoint1, yControlPoint1, xControlPoint2, yControlPoint2, xAnchor, yAnchor, xControlPoint1, etc...]\n\t\t_subdivideSegment = function(segment, quantity) {\n\t\t\tvar tally = 0,\n\t\t\t\tmax = 0.999999,\n\t\t\t\tl = segment.length,\n\t\t\t\tnewPointsPerSegment = quantity / ((l - 2) / 6),\n\t\t\t\tax, ay, cp1x, cp1y, cp2x, cp2y, bx, by,\n\t\t\t\tx1, y1, x2, y2, i, t;\n\t\t\tfor (i = 2; i < l; i += 6) {\n\t\t\t\ttally += newPointsPerSegment;\n\t\t\t\twhile (tally > max) { //compare with 0.99999 instead of 1 in order to prevent rounding errors\n\t\t\t\t\tax = segment[i-2];\n\t\t\t\t\tay = segment[i-1];\n\t\t\t\t\tcp1x = segment[i];\n\t\t\t\t\tcp1y = segment[i+1];\n\t\t\t\t\tcp2x = segment[i+2];\n\t\t\t\t\tcp2y = segment[i+3];\n\t\t\t\t\tbx = segment[i+4];\n\t\t\t\t\tby = segment[i+5];\n\t\t\t\t\tt = 1 / ((Math.floor(tally) || 1) + 1); //progress along the bezier (value between 0 and 1)\n\t\t\t\t\tx1 = ax + (cp1x - ax) * t;\n\t\t\t\t\tx2 = cp1x + (cp2x - cp1x) * t;\n\t\t\t\t\tx1 += (x2 - x1) * t;\n\t\t\t\t\tx2 += ((cp2x + (bx - cp2x) * t) - x2) * t;\n\n\t\t\t\t\ty1 = ay + (cp1y - ay) * t;\n\t\t\t\t\ty2 = cp1y + (cp2y - cp1y) * t;\n\t\t\t\t\ty1 += (y2 - y1) * t;\n\t\t\t\t\ty2 += ((cp2y + (by - cp2y) * t) - y2) * t;\n\n\t\t\t\t\tsegment.splice(i, 4,\n\t\t\t\t\t\tax + (cp1x - ax) * t,   //first control point\n\t\t\t\t\t\tay + (cp1y - ay) * t,\n\t\t\t\t\t\tx1,                     //second control point\n\t\t\t\t\t\ty1,\n\t\t\t\t\t\tx1 + (x2 - x1) * t,     //new fabricated anchor on line\n\t\t\t\t\t\ty1 + (y2 - y1) * t,\n\t\t\t\t\t\tx2,                     //third control point\n\t\t\t\t\t\ty2,\n\t\t\t\t\t\tcp2x + (bx - cp2x) * t, //fourth control point\n\t\t\t\t\t\tcp2y + (by - cp2y) * t\n\t\t\t\t\t);\n\t\t\t\t\ti += 6;\n\t\t\t\t\tl += 6;\n\t\t\t\t\ttally--;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn segment;\n\t\t},\n\t\t_rawPathToString = function(rawPath, precision) {\n\t\t\tvar s = \"\",\n\t\t\t\tspace = \" \",\n\t\t\t\tl = rawPath.length,\n\t\t\t\trnd = Math.pow(10, precision || 2),\n\t\t\t\ti, j, segment;\n\t\t\tfor (j = 0; j < rawPath.length; j++) {\n\t\t\t\tsegment = rawPath[j];\n\t\t\t\tl = segment.length;\n\t\t\t\ts += \"M\" + (((segment[0] * rnd) | 0) / rnd) + space + (((segment[1] * rnd) | 0) / rnd) + \" C\";\n\t\t\t\tfor (i = 2; i < l; i++) { //this is actually faster than just doing a join() on the array, possibly because the numbers have so many decimal places\n\t\t\t\t\ts += (((segment[i] * rnd) | 0) / rnd) + space;\n\t\t\t\t}\n\t\t\t\tif (segment.closed) {\n\t\t\t\t\ts += \"z\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t_reverseBezier = function(segment) {\n\t\t\tvar a = [],\n\t\t\t\ti = segment.length - 1,\n\t\t\t\tl = 0;\n\t\t\twhile (--i > -1) {\n\t\t\t\ta[l++] = segment[i];\n\t\t\t\ta[l++] = segment[i+1];\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tsegment[i] = a[i];\n\t\t\t}\n\t\t\tsegment.reversed = !segment.reversed;\n\t\t},\n\t\t_getAverageXY = function(segment) {\n\t\t\tvar l = segment.length,\n\t\t\t\tx = 0,\n\t\t\t\ty = 0,\n\t\t\t\ti;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tx += segment[i++];\n\t\t\t\ty += segment[i];\n\t\t\t}\n\t\t\treturn [x / (l / 2), y / (l / 2)];\n\t\t},\n\t\t_getSize = function(segment) { //rough estimate of the bounding box (based solely on the anchors) of a single segment. sets \"size\", \"centerX\", and \"centerY\" properties on the bezier array itself, and returns the size (width * height)\n\t\t\tvar l = segment.length,\n\t\t\t\txMax = segment[0],\n\t\t\t\txMin = xMax,\n\t\t\t\tyMax = segment[1],\n\t\t\t\tyMin = yMax,\n\t\t\t\tx, y, i;\n\t\t\tfor (i = 6; i < l; i+=6) {\n\t\t\t\tx = segment[i];\n\t\t\t\ty = segment[i+1];\n\t\t\t\tif (x > xMax) {\n\t\t\t\t\txMax = x;\n\t\t\t\t} else if (x < xMin) {\n\t\t\t\t\txMin = x;\n\t\t\t\t}\n\t\t\t\tif (y > yMax) {\n\t\t\t\t\tyMax = y;\n\t\t\t\t} else if (y < yMin) {\n\t\t\t\t\tyMin = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsegment.centerX = (xMax + xMin) / 2;\n\t\t\tsegment.centerY = (yMax + yMin) / 2;\n\t\t\treturn (segment.size = (xMax - xMin) * (yMax - yMin));\n\t\t},\n\t\t_getTotalSize = function(rawPath, samplesPerBezier) { //rough estimate of the bounding box of the entire list of Bezier segments (based solely on the anchors). sets \"size\", \"centerX\", and \"centerY\" properties on the bezier array itself, and returns the size (width * height)\n\t\t\tsamplesPerBezier = samplesPerBezier || 3;\n\t\t\tvar j = rawPath.length,\n\t\t\t\txMax = rawPath[0][0],\n\t\t\t\txMin = xMax,\n\t\t\t\tyMax = rawPath[0][1],\n\t\t\t\tyMin = yMax,\n\t\t\t\tinc = 1 / samplesPerBezier,\n\t\t\t\tl, x, y, i, segment, k, t, inv, x1, y1, x2, x3, x4, y2, y3, y4;\n\t\t\twhile (--j > -1) {\n\t\t\t\tsegment = rawPath[j];\n\t\t\t\tl = segment.length;\n\t\t\t\tfor (i = 6; i < l; i+=6) {\n\t\t\t\t\tx1 = segment[i];\n\t\t\t\t\ty1 = segment[i+1];\n\t\t\t\t\tx2 = segment[i+2] - x1;\n\t\t\t\t\ty2 = segment[i+3] - y1;\n\t\t\t\t\tx3 = segment[i+4] - x1;\n\t\t\t\t\ty3 = segment[i+5] - y1;\n\t\t\t\t\tx4 = segment[i+6] - x1;\n\t\t\t\t\ty4 = segment[i+7] - y1;\n\t\t\t\t\tk = samplesPerBezier;\n\t\t\t\t\twhile (--k > -1) {\n\t\t\t\t\t\tt = inc * k;\n\t\t\t\t\t\tinv = 1 - t;\n\t\t\t\t\t\tx = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t + x1;\n\t\t\t\t\t\ty = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t + y1;\n\t\t\t\t\t\tif (x > xMax) {\n\t\t\t\t\t\t\txMax = x;\n\t\t\t\t\t\t} else if (x < xMin) {\n\t\t\t\t\t\t\txMin = x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (y > yMax) {\n\t\t\t\t\t\t\tyMax = y;\n\t\t\t\t\t\t} else if (y < yMin) {\n\t\t\t\t\t\t\tyMin = y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\trawPath.centerX = (xMax + xMin) / 2;\n\t\t\trawPath.centerY = (yMax + yMin) / 2;\n\t\t\trawPath.left = xMin;\n\t\t\trawPath.width = (xMax - xMin);\n\t\t\trawPath.top = yMin;\n\t\t\trawPath.height = (yMax - yMin);\n\t\t\treturn (rawPath.size = (xMax - xMin) * (yMax - yMin));\n\t\t},\n\t\t_sortByComplexity = function(a, b) {\n\t\t\treturn b.length - a.length;\n\t\t},\n\t\t_sortBySize = function(a, b) {\n\t\t\tvar sizeA = a.size || _getSize(a),\n\t\t\t\tsizeB = b.size || _getSize(b);\n\t\t\treturn (Math.abs(sizeB - sizeA) < (sizeA + sizeB) / 20) ? (b.centerX - a.centerX) || (b.centerY - a.centerY) : sizeB - sizeA; //if the size is within 10% of each other, prioritize position from left to right, then top to bottom.\n\t\t},\n\t\t_offsetSegment = function(segment, shapeIndex) {\n\t\t\tvar a = segment.slice(0),\n\t\t\t\tl = segment.length,\n\t\t\t\twrap = l - 2,\n\t\t\t\ti, index;\n\t\t\tshapeIndex = shapeIndex | 0;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tindex = (i + shapeIndex) % wrap;\n\t\t\t\tsegment[i++] = a[index];\n\t\t\t\tsegment[i] = a[index+1];\n\t\t\t}\n\t\t},\n\t\t_getTotalMovement = function(sb, eb, shapeIndex, offsetX, offsetY) {\n\t\t\tvar l = sb.length,\n\t\t\t\td = 0,\n\t\t\t\twrap = l - 2,\n\t\t\t\tindex, i, x, y;\n\t\t\tshapeIndex *= 6;\n\t\t\tfor (i = 0; i < l; i += 6) {\n\t\t\t\tindex = (i + shapeIndex) % wrap;\n\t\t\t\ty = sb[index] - (eb[i] - offsetX);\n\t\t\t\tx = sb[index+1] - (eb[i+1] - offsetY);\n\t\t\t\td += _sqrt(x * x + y * y);\n\t\t\t}\n\t\t\treturn d;\n\t\t},\n\t\t_getClosestShapeIndex = function(sb, eb, checkReverse) { //finds the index in a closed cubic bezier array that's closest to the angle provided (angle measured from the center or average x/y).\n\t\t\tvar l = sb.length,\n\t\t\t\tsCenter = _getAverageXY(sb), //when comparing distances, adjust the coordinates as if the shapes are centered with each other.\n\t\t\t\teCenter = _getAverageXY(eb),\n\t\t\t\toffsetX = eCenter[0] - sCenter[0],\n\t\t\t\toffsetY = eCenter[1] - sCenter[1],\n\t\t\t\tmin = _getTotalMovement(sb, eb, 0, offsetX, offsetY),\n\t\t\t\tminIndex = 0,\n\t\t\t\tcopy, d, i;\n\t\t\tfor (i = 6; i < l; i += 6) {\n\t\t\t\td = _getTotalMovement(sb, eb, i / 6, offsetX, offsetY);\n\t\t\t\tif (d < min) {\n\t\t\t\t\tmin = d;\n\t\t\t\t\tminIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (checkReverse) {\n\t\t\t\tcopy = sb.slice(0);\n\t\t\t\t_reverseBezier(copy);\n\t\t\t\tfor (i = 6; i < l; i += 6) {\n\t\t\t\t\td = _getTotalMovement(copy, eb, i / 6, offsetX, offsetY);\n\t\t\t\t\tif (d < min) {\n\t\t\t\t\t\tmin = d;\n\t\t\t\t\t\tminIndex = -i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn minIndex / 6;\n\t\t},\n\t\t_getClosestAnchor = function(bezier, x, y) { //finds the x/y of the anchor that's closest to the provided x/y coordinate (returns an array, like [x, y]). The bezier should be the top-level type that contains an array for each segment.\n\t\t\tvar j = bezier.length,\n\t\t\t\tclosestDistance = 99999999999,\n\t\t\t\tclosestX = 0,\n\t\t\t\tclosestY = 0,\n\t\t\t\tb, dx, dy, d, i, l;\n\t\t\twhile (--j > -1) {\n\t\t\t\tb = bezier[j];\n\t\t\t\tl = b.length;\n\t\t\t\tfor (i = 0; i < l; i += 6) {\n\t\t\t\t\tdx = b[i] - x;\n\t\t\t\t\tdy = b[i+1] - y;\n\t\t\t\t\td = _sqrt(dx * dx + dy * dy);\n\t\t\t\t\tif (d < closestDistance) {\n\t\t\t\t\t\tclosestDistance = d;\n\t\t\t\t\t\tclosestX = b[i];\n\t\t\t\t\t\tclosestY = b[i+1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [closestX, closestY];\n\t\t},\n\t\t_getClosestSegment = function(bezier, pool, startIndex, sortRatio, offsetX, offsetY) { //matches the bezier to the closest one in a pool (array) of beziers, assuming they are in order of size and we shouldn't drop more than 20% of the size, otherwise prioritizing location (total distance to the center). Extracts the segment out of the pool array and returns it.\n\t\t\tvar l = pool.length,\n\t\t\t\tindex = 0,\n\t\t\t\tminSize = Math.min(bezier.size || _getSize(bezier), pool[startIndex].size || _getSize(pool[startIndex])) * sortRatio, //limit things based on a percentage of the size of either the bezier or the next element in the array, whichever is smaller.\n\t\t\t\tmin = 999999999999,\n\t\t\t\tcx = bezier.centerX + offsetX,\n\t\t\t\tcy = bezier.centerY + offsetY,\n\t\t\t\tsize, i, dx, dy, d;\n\t\t\tfor (i = startIndex; i < l; i++) {\n\t\t\t\tsize = pool[i].size || _getSize(pool[i]);\n\t\t\t\tif (size < minSize) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdx = pool[i].centerX - cx;\n\t\t\t\tdy = pool[i].centerY - cy;\n\t\t\t\td = _sqrt(dx * dx + dy * dy);\n\t\t\t\tif (d < min) {\n\t\t\t\t\tindex = i;\n\t\t\t\t\tmin = d;\n\t\t\t\t}\n\t\t\t}\n\t\t\td = pool[index];\n\t\t\tpool.splice(index, 1);\n\t\t\treturn d;\n\t\t},\n\t\t_equalizeSegmentQuantity = function(start, end, shapeIndex, map, fillSafe) { //returns an array of shape indexes, 1 for each segment.\n\t\t\tvar dif = end.length - start.length,\n\t\t\t\tlonger = dif > 0 ? end : start,\n\t\t\t\tshorter = dif > 0 ? start : end,\n\t\t\t\tadded = 0,\n\t\t\t\tsortMethod = (map === \"complexity\") ? _sortByComplexity : _sortBySize,\n\t\t\t\tsortRatio = (map === \"position\") ? 0 : (typeof(map) === \"number\") ? map : 0.8,\n\t\t\t\ti = shorter.length,\n\t\t\t\tshapeIndices = (typeof(shapeIndex) === \"object\" && shapeIndex.push) ? shapeIndex.slice(0) : [shapeIndex],\n\t\t\t\treverse = (shapeIndices[0] === \"reverse\" || shapeIndices[0] < 0),\n\t\t\t\tlog = (shapeIndex === \"log\"),\n\t\t\t\teb, sb, b, x, y, offsetX, offsetY;\n\t\t\tif (!shorter[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (longer.length > 1) {\n\t\t\t\tstart.sort(sortMethod);\n\t\t\t\tend.sort(sortMethod);\n\t\t\t\toffsetX = longer.size || _getTotalSize(longer); //ensures centerX and centerY are defined (used below).\n\t\t\t\toffsetX = shorter.size || _getTotalSize(shorter);\n\t\t\t\toffsetX = longer.centerX - shorter.centerX;\n\t\t\t\toffsetY = longer.centerY - shorter.centerY;\n\t\t\t\tif (sortMethod === _sortBySize) {\n\t\t\t\t\tfor (i = 0; i < shorter.length; i++) {\n\t\t\t\t\t\tlonger.splice(i, 0, _getClosestSegment(shorter[i], longer, i, sortRatio, offsetX, offsetY));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dif) {\n\t\t\t\tif (dif < 0) {\n\t\t\t\t\tdif = -dif;\n\t\t\t\t}\n\t\t\t\tif (longer[0].length > shorter[0].length) { //since we use shorter[0] as the one to map the origination point of any brand new fabricated segments, do any subdividing first so that there are more points to choose from (if necessary)\n\t\t\t\t\t_subdivideSegment(shorter[0], ((longer[0].length - shorter[0].length)/6) | 0);\n\t\t\t\t}\n\t\t\t\ti = shorter.length;\n\t\t\t\twhile (added < dif) {\n\t\t\t\t\tx = longer[i].size || _getSize(longer[i]); //just to ensure centerX and centerY are calculated which we use on the next line.\n\t\t\t\t\tb = _getClosestAnchor(shorter, longer[i].centerX, longer[i].centerY);\n\t\t\t\t\tx = b[0];\n\t\t\t\t\ty = b[1];\n\t\t\t\t\tshorter[i++] = [x, y, x, y, x, y, x, y];\n\t\t\t\t\tshorter.totalPoints += 8;\n\t\t\t\t\tadded++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; i < start.length; i++) {\n\t\t\t\teb = end[i];\n\t\t\t\tsb = start[i];\n\t\t\t\tdif = eb.length - sb.length;\n\t\t\t\tif (dif < 0) {\n\t\t\t\t\t_subdivideSegment(eb, (-dif/6) | 0);\n\t\t\t\t} else if (dif > 0) {\n\t\t\t\t\t_subdivideSegment(sb, (dif/6) | 0);\n\t\t\t\t}\n\t\t\t\tif (reverse && fillSafe !== false && !sb.reversed) {\n\t\t\t\t\t_reverseBezier(sb);\n\t\t\t\t}\n\t\t\t\tshapeIndex = (shapeIndices[i] || shapeIndices[i] === 0) ? shapeIndices[i] : \"auto\";\n\t\t\t\tif (shapeIndex) {\n\t\t\t\t\t//if start shape is closed, find the closest point to the start/end, and re-organize the bezier points accordingly so that the shape morphs in a more intuitive way.\n\t\t\t\t\tif (sb.closed || (Math.abs(sb[0] - sb[sb.length - 2]) < 0.5 && Math.abs(sb[1] - sb[sb.length - 1]) < 0.5)) {\n\t\t\t\t\t\tif (shapeIndex === \"auto\" || shapeIndex === \"log\") {\n\t\t\t\t\t\t\tshapeIndices[i] = shapeIndex = _getClosestShapeIndex(sb, eb, (!i || fillSafe === false));\n\t\t\t\t\t\t\tif (shapeIndex < 0) {\n\t\t\t\t\t\t\t\treverse = true;\n\t\t\t\t\t\t\t\t_reverseBezier(sb);\n\t\t\t\t\t\t\t\tshapeIndex = -shapeIndex;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_offsetSegment(sb, shapeIndex * 6);\n\n\t\t\t\t\t\t} else if (shapeIndex !== \"reverse\") {\n\t\t\t\t\t\t\tif (i && shapeIndex < 0) { //only happens if an array is passed as shapeIndex and a negative value is defined for an index beyond 0. Very rare, but helpful sometimes.\n\t\t\t\t\t\t\t\t_reverseBezier(sb);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_offsetSegment(sb, (shapeIndex < 0 ? -shapeIndex : shapeIndex) * 6);\n\t\t\t\t\t\t}\n\t\t\t\t\t//otherwise, if it's not a closed shape, consider reversing it if that would make the overall travel less\n\t\t\t\t\t} else if (!reverse && (shapeIndex === \"auto\" && (Math.abs(eb[0] - sb[0]) + Math.abs(eb[1] - sb[1]) + Math.abs(eb[eb.length - 2] - sb[sb.length - 2]) + Math.abs(eb[eb.length - 1] - sb[sb.length - 1]) > Math.abs(eb[0] - sb[sb.length - 2]) + Math.abs(eb[1] - sb[sb.length - 1]) + Math.abs(eb[eb.length - 2] - sb[0]) + Math.abs(eb[eb.length - 1] - sb[1])) || (shapeIndex % 2))) {\n\t\t\t\t\t\t_reverseBezier(sb);\n\t\t\t\t\t\tshapeIndices[i] = -1;\n\t\t\t\t\t\treverse = true;\n\t\t\t\t\t} else if (shapeIndex === \"auto\") {\n\t\t\t\t\t\tshapeIndices[i] = 0;\n\t\t\t\t\t} else if (shapeIndex === \"reverse\") {\n\t\t\t\t\t\tshapeIndices[i] = -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (sb.closed !== eb.closed) { //if one is closed and one isn't, don't close either one otherwise the tweening will look weird (but remember, the beginning and final states will honor the actual values, so this only affects the inbetween state)\n\t\t\t\t\t\tsb.closed = eb.closed = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (log) {\n\t\t\t\t_log(\"shapeIndex:[\" + shapeIndices.join(\",\") + \"]\");\n\t\t\t}\n\t\t\tstart.shapeIndex = shapeIndices;\n\t\t\treturn shapeIndices;\n\t\t},\n\t\t_pathFilter = function(a, shapeIndex, map, precompile, fillSafe) {\n\t\t\tvar start = _stringToRawPath(a[0]),\n\t\t\t\tend = _stringToRawPath(a[1]);\n\t\t\tif (!_equalizeSegmentQuantity(start, end, (shapeIndex || shapeIndex === 0) ? shapeIndex : \"auto\", map, fillSafe)) {\n\t\t\t\treturn; //malformed path data or null target\n\t\t\t}\n\t\t\ta[0] = _rawPathToString(start);\n\t\t\ta[1] = _rawPathToString(end);\n\t\t\tif (precompile === \"log\" || precompile === true) {\n\t\t\t\t_log('precompile:[\"' + a[0] + '\",\"' + a[1] + '\"]');\n\t\t\t}\n\t\t},\n\t\t/*\n\t\t_buildPathFilter = function(shapeIndex, map, precompile) {\n\t\t\treturn (map || precompile || shapeIndex || shapeIndex === 0) ? function(a) {\n\t\t\t\t_pathFilter(a, shapeIndex, map, precompile);\n\t\t\t} : _pathFilter;\n\t\t},\n\t\t*/\n\t\t_offsetPoints = function(text, offset) {\n\t\t\tif (!offset) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\tvar a = text.match(_numbersExp) || [],\n\t\t\t\tl = a.length,\n\t\t\t\ts = \"\",\n\t\t\t\tinc, i, j;\n\t\t\tif (offset === \"reverse\") {\n\t\t\t\ti = l-1;\n\t\t\t\tinc = -2;\n\t\t\t} else {\n\t\t\t\ti = (((parseInt(offset, 10) || 0) * 2 + 1) + l * 100) % l;\n\t\t\t\tinc = 2;\n\t\t\t}\n\t\t\tfor (j = 0; j < l; j += 2) {\n\t\t\t\ts += a[i-1] + \",\" + a[i] + \" \";\n\t\t\t\ti = (i + inc) % l;\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t//adds a certain number of points while maintaining the polygon/polyline shape (so that the start/end values can have a matching quantity of points to animate). Returns the revised string.\n\t\t_equalizePointQuantity = function(a, quantity) {\n\t\t\tvar tally = 0,\n\t\t\t\tx = parseFloat(a[0]),\n\t\t\t\ty = parseFloat(a[1]),\n\t\t\t\ts = x + \",\" + y + \" \",\n\t\t\t\tmax = 0.999999,\n\t\t\t\tnewPointsPerSegment, i, l, j, factor, nextX, nextY;\n\t\t\tl = a.length;\n\t\t\tnewPointsPerSegment = quantity * 0.5 / (l * 0.5 - 1);\n\t\t\tfor (i = 0; i < l-2; i += 2) {\n\t\t\t\ttally += newPointsPerSegment;\n\t\t\t\tnextX = parseFloat(a[i+2]);\n\t\t\t\tnextY = parseFloat(a[i+3]);\n\t\t\t\tif (tally > max) { //compare with 0.99999 instead of 1 in order to prevent rounding errors\n\t\t\t\t\tfactor = 1 / (Math.floor(tally) + 1);\n\t\t\t\t\tj = 1;\n\t\t\t\t\twhile (tally > max) {\n\t\t\t\t\t\ts += (x + (nextX - x) * factor * j).toFixed(2) + \",\" + (y + (nextY - y) * factor * j).toFixed(2) + \" \";\n\t\t\t\t\t\ttally--;\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ts += nextX + \",\" + nextY + \" \";\n\t\t\t\tx = nextX;\n\t\t\t\ty = nextY;\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\t\t_pointsFilter = function(a) {\n\t\t\tvar startNums = a[0].match(_numbersExp) || [],\n\t\t\t\tendNums = a[1].match(_numbersExp) || [],\n\t\t\t\tdif = endNums.length - startNums.length;\n\t\t\tif (dif > 0) {\n\t\t\t\ta[0] = _equalizePointQuantity(startNums, dif);\n\t\t\t} else {\n\t\t\t\ta[1] = _equalizePointQuantity(endNums, -dif);\n\t\t\t}\n\t\t},\n\t\t_buildPointsFilter = function(shapeIndex) {\n\t\t\treturn !isNaN(shapeIndex) ? function(a) {\n\t\t\t\t_pointsFilter(a);\n\t\t\t\ta[1] = _offsetPoints(a[1], parseInt(shapeIndex, 10));\n\t\t\t} : _pointsFilter;\n\t\t},\n\t\t_createPath = function(e, ignore) {\n\t\t\tvar path = _gsScope.document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\"),\n\t\t\t\tattr = Array.prototype.slice.call(e.attributes),\n\t\t\t\ti = attr.length,\n\t\t\t\tname;\n\t\t\tignore = \",\" + ignore + \",\";\n\t\t\twhile (--i > -1) {\n\t\t\t\tname = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.\n\t\t\t\tif (ignore.indexOf(\",\" + name + \",\") === -1) {\n\t\t\t\t\tpath.setAttributeNS(null, name, attr[i].nodeValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn path;\n\t\t},\n\t\t_typeAttrs = {\n\t\t\trect:\"rx,ry,x,y,width,height\",\n\t\t\tcircle:\"r,cx,cy\",\n\t\t\tellipse:\"rx,ry,cx,cy\",\n\t\t\tline:\"x1,x2,y1,y2\"\n\t\t},\n\t\t_attrToObj = function(e, attrs) {\n\t\t\tvar props = attrs ? attrs.split(\",\") : [],\n\t\t\t\tobj = {},\n\t\t\t\ti = props.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tobj[props[i]] = +e.getAttribute(props[i]) || 0;\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t\t_convertToPath = function(e, swap) {\n\t\t\tvar type = e.tagName.toLowerCase(),\n\t\t\t\tcirc = 0.552284749831,\n\t\t\t\tdata, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;\n\t\t\tif (type === \"path\" || !e.getBBox) {\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tpath = _createPath(e, \"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points\");\n\t\t\tattr = _attrToObj(e, _typeAttrs[type]);\n\t\t\tif (type === \"rect\") {\n\t\t\t\tr = attr.rx;\n\t\t\t\try = attr.ry;\n\t\t\t\tx = attr.x;\n\t\t\t\ty = attr.y;\n\t\t\t\tw = attr.width - r * 2;\n\t\t\t\th = attr.height - ry * 2;\n\t\t\t\tif (r || ry) { //if there are rounded corners, render cubic beziers\n\t\t\t\t\tx2 = x + r * (1 - circ);\n\t\t\t\t\tx3 = x + r;\n\t\t\t\t\tx4 = x3 + w;\n\t\t\t\t\tx5 = x4 + r * circ;\n\t\t\t\t\tx6 = x4 + r;\n\t\t\t\t\ty2 = y + ry * (1 - circ);\n\t\t\t\t\ty3 = y + ry;\n\t\t\t\t\ty4 = y3 + h;\n\t\t\t\t\ty5 = y4 + ry * circ;\n\t\t\t\t\ty6 = y4 + ry;\n\t\t\t\t\tdata = \"M\" + x6 + \",\" + y3 + \" V\" + y4 + \" C\" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(\",\") + \"z\";\n\t\t\t\t} else {\n\t\t\t\t\tdata = \"M\" + (x + w) + \",\" + y + \" v\" + h + \" h\" + (-w) + \" v\" + (-h) + \" h\" + w + \"z\";\n\t\t\t\t}\n\n\t\t\t} else if (type === \"circle\" || type === \"ellipse\") {\n\t\t\t\tif (type === \"circle\") {\n\t\t\t\t\tr = ry = attr.r;\n\t\t\t\t\trycirc = r * circ;\n\t\t\t\t} else {\n\t\t\t\t\tr = attr.rx;\n\t\t\t\t\try = attr.ry;\n\t\t\t\t\trycirc = ry * circ;\n\t\t\t\t}\n\t\t\t\tx = attr.cx;\n\t\t\t\ty = attr.cy;\n\t\t\t\trcirc = r * circ;\n\t\t\t\tdata = \"M\" + (x+r) + \",\" + y + \" C\" + [x+r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(\",\") + \"z\";\n\t\t\t} else if (type === \"line\") {\n\t\t\t\tdata = \"M\" + attr.x1 + \",\" + attr.y1 + \" L\" + attr.x2 + \",\" + attr.y2; //previously, we just converted to \"Mx,y Lx,y\" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.\n\t\t\t} else if (type === \"polyline\" || type === \"polygon\") {\n\t\t\t\tpoints = (e.getAttribute(\"points\") + \"\").match(_numbersExp) || [];\n\t\t\t\tx = points.shift();\n\t\t\t\ty = points.shift();\n\t\t\t\tdata = \"M\" + x + \",\" + y + \" L\" + points.join(\",\");\n\t\t\t\tif (type === \"polygon\") {\n\t\t\t\t\tdata += \",\" + x + \",\" + y + \"z\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tpath.setAttribute(\"d\", _rawPathToString(path._gsRawPath = _stringToRawPath(data)));\n\t\t\tif (swap && e.parentNode) {\n\t\t\t\te.parentNode.insertBefore(path, e);\n\t\t\t\te.parentNode.removeChild(e);\n\t\t\t}\n\n\t\t\treturn path;\n\t\t},\n\t\t_parseShape = function(shape, forcePath, target) {\n\t\t\tvar isString = typeof(shape) === \"string\",\n\t\t\t\te, type;\n\t\t\tif (!isString || _selectorExp.test(shape) || (shape.match(_numbersExp) || []).length < 3) {\n\t\t\t\te = isString ? TweenLite.selector(shape) : (shape && shape[0]) ? shape : [shape]; //allow array-like objects like jQuery objects.\n\t\t\t\tif (e && e[0]) {\n\t\t\t\t\te = e[0];\n\t\t\t\t\ttype = (e.nodeName + \"\").toUpperCase();\n\t\t\t\t\tif (forcePath && type !== \"PATH\") { //if we were passed an element (or selector text for an element) that isn't a path, convert it.\n\t\t\t\t\t\te = _convertToPath(e, false);\n\t\t\t\t\t\ttype = \"PATH\";\n\t\t\t\t\t}\n\t\t\t\t\tshape = e.getAttribute(type === \"PATH\" ? \"d\" : \"points\") || \"\";\n\t\t\t\t\tif (e === target) { //if the shape matches the target element, the user wants to revert to the original which should have been stored in the data-original attribute\n\t\t\t\t\t\tshape = e.getAttributeNS(null, \"data-original\") || shape;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_log(\"WARNING: invalid morph to: \" + shape);\n\t\t\t\t\tshape = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn shape;\n\t\t},\n\t\t//adds an \"isSmooth\" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.\n\t\t_populateSmoothData = function(rawPath, tolerance) {\n\t\t\tvar j = rawPath.length,\n\t\t\t\tlimit = 0.2 * (tolerance || 1),\n\t\t\t\tsmooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;\n\t\t\twhile (--j > -1) {\n\t\t\t\tsegment = rawPath[j];\n\t\t\t\tisSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];\n\t\t\t\tsmoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];\n\t\t\t\tisSmooth.length = 4;\n\t\t\t\tl = segment.length - 2;\n\t\t\t\tfor (i = 6; i < l; i += 6) {\n\t\t\t\t\tx = segment[i] - segment[i - 2];\n\t\t\t\t\ty = segment[i + 1] - segment[i - 1];\n\t\t\t\t\tx2 = segment[i + 2] - segment[i];\n\t\t\t\t\ty2 = segment[i + 3] - segment[i + 1];\n\t\t\t\t\ta = _atan2(y, x);\n\t\t\t\t\ta2 = _atan2(y2, x2);\n\t\t\t\t\tsmooth = (Math.abs(a - a2) < limit);\n\t\t\t\t\tif (smooth) {\n\t\t\t\t\t\tsmoothData[i - 2] = a;\n\t\t\t\t\t\tsmoothData[i + 2] = a2;\n\t\t\t\t\t\tsmoothData[i - 1] = _sqrt(x * x + y * y);\n\t\t\t\t\t\tsmoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t\t\t}\n\t\t\t\t\tisSmooth.push(smooth, smooth, 0, 0, smooth, smooth);\n\t\t\t\t}\n\t\t\t\t//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.\n\t\t\t\tif (segment[l] === segment[0] && segment[l+1] === segment[1]) {\n\t\t\t\t\tx = segment[0] - segment[l-2];\n\t\t\t\t\ty = segment[1] - segment[l-1];\n\t\t\t\t\tx2 = segment[2] - segment[0];\n\t\t\t\t\ty2 = segment[3] - segment[1];\n\t\t\t\t\ta = _atan2(y, x);\n\t\t\t\t\ta2 = _atan2(y2, x2);\n\t\t\t\t\tif (Math.abs(a - a2) < limit) {\n\t\t\t\t\t\tsmoothData[l-2] = a;\n\t\t\t\t\t\tsmoothData[2] = a2;\n\t\t\t\t\t\tsmoothData[l-1] = _sqrt(x * x + y * y);\n\t\t\t\t\t\tsmoothData[3] = _sqrt(x2 * x2 + y2 * y2);\n\t\t\t\t\t\tisSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn rawPath;\n\t\t},\n\t\t_parseOriginFactors = function(v) {\n\t\t\tvar a = v.trim().split(\" \"),\n\t\t\t\tx = (v.indexOf(\"left\") >= 0) ? 0 : (v.indexOf(\"right\") >= 0) ? 100 : isNaN(parseFloat(a[0])) ? 50 : parseFloat(a[0]),\n\t\t\t\ty = (v.indexOf(\"top\") >= 0) ? 0 : (v.indexOf(\"bottom\") >= 0) ? 100 : isNaN(parseFloat(a[1])) ? 50 : parseFloat(a[1]);\n\t\t\treturn {x:x / 100, y:y / 100};\n\t\t},\n\t\t_shortAngle = function(dif) {\n\t\t\treturn (dif !== dif % _PI) ? dif + ((dif < 0) ? _2PI : -_2PI) : dif;\n\t\t},\n\t\t_morphMessage = \"Use MorphSVGPlugin.convertToPath(elementOrSelectorText) to convert to a path before morphing.\",\n\n\n\n\t\tMorphSVGPlugin = _gsScope._gsDefine.plugin({\n\t\t\tpropName: \"morphSVG\",\n\t\t\tAPI: 2,\n\t\t\tglobal: true,\n\t\t\tversion: \"0.9.1\",\n\n\t\t\t//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\t\tinit: function(target, value, tween, index) {\n\t\t\t\tvar cs = target.nodeType ? window.getComputedStyle(target) : {},\n\t\t\t\t\tfill = cs.fill + \"\",\n\t\t\t\t\tfillSafe = !(fill === \"none\" || (fill.match(_numbersExp) || [])[3] === \"0\" || cs.fillRule === \"evenodd\"),\n\t\t\t\t\torigins = (value.origin || \"50 50\").split(\",\"),\n\t\t\t\t\ttype, p, pt, shape, isPoly, shapeIndex, map, startSmooth, endSmooth, start, end, i, j, l, startSeg, endSeg, precompiled, sData, eData, originFactors, useRotation, offset;\n\t\t\t\tif (typeof(value) === \"function\") {\n\t\t\t\t\tvalue = value(index, target);\n\t\t\t\t}\n\t\t\t\ttype = (target.nodeName + \"\").toUpperCase();\n\t\t\t\tisPoly = (type === \"POLYLINE\" || type === \"POLYGON\");\n\t\t\t\tif (type !== \"PATH\" && !isPoly && !value.prop) {\n\t\t\t\t\t_log(\"WARNING: cannot morph a <\" + type + \"> element. \" + _morphMessage);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tp = (type === \"PATH\") ? \"d\" : \"points\";\n\t\t\t\tif (typeof(value) === \"string\" || value.getBBox || value[0]) {\n\t\t\t\t\tvalue = {shape:value};\n\t\t\t\t}\n\t\t\t\tif (!value.prop && typeof(target.setAttribute) !== \"function\") {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tshape = _parseShape(value.shape || value.d || value.points || \"\", (p === \"d\"), target);\n\t\t\t\tif (isPoly && _commands.test(shape)) {\n\t\t\t\t\t_log(\"WARNING: a <\" + type + \"> cannot accept path data. \" + _morphMessage);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tshapeIndex = (value.shapeIndex || value.shapeIndex === 0) ? value.shapeIndex : \"auto\";\n\t\t\t\tmap = value.map || MorphSVGPlugin.defaultMap;\n\t\t\t\tthis._prop = value.prop;\n\t\t\t\tthis._render = value.render || MorphSVGPlugin.defaultRender;\n\t\t\t\tthis._apply = (\"updateTarget\" in value) ? value.updateTarget : MorphSVGPlugin.defaultUpdateTarget;\n\t\t\t\tthis._rnd = Math.pow(10, isNaN(value.precision) ? 2 : +value.precision);\n\t\t\t\tthis._tween = tween;\n\t\t\t\tif (shape) {\n\t\t\t\t\tthis._target = target;\n\t\t\t\t\tprecompiled = (typeof(value.precompile) === \"object\");\n\t\t\t\t\tstart = this._prop ? target[this._prop] : target.getAttribute(p);\n\t\t\t\t\tif (!this._prop && !target.getAttributeNS(null, \"data-original\")) {\n\t\t\t\t\t\ttarget.setAttributeNS(null, \"data-original\", start); //record the original state in a data-original attribute so that we can revert to it later.\n\t\t\t\t\t}\n\t\t\t\t\tif (p === \"d\" || this._prop) {\n\t\t\t\t\t\tstart = _stringToRawPath(precompiled ? value.precompile[0] : start);\n\t\t\t\t\t\tend = _stringToRawPath(precompiled ? value.precompile[1] : shape);\n\t\t\t\t\t\tif (!precompiled && !_equalizeSegmentQuantity(start, end, shapeIndex, map, fillSafe)) {\n\t\t\t\t\t\t\treturn false; //malformed path data or null target\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value.precompile === \"log\" || value.precompile === true) {\n\t\t\t\t\t\t\t_log('precompile:[\"' + _rawPathToString(start) + '\",\"' + _rawPathToString(end) + '\"]');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuseRotation = (value.type || MorphSVGPlugin.defaultType) !== \"linear\";\n\n\t\t\t\t\t\tif (useRotation) {\n\t\t\t\t\t\t\tstart = _populateSmoothData(start, value.smoothTolerance);\n\t\t\t\t\t\t\tend = _populateSmoothData(end, value.smoothTolerance   );\n\t\t\t\t\t\t\tif (!start.size) {\n\t\t\t\t\t\t\t\t_getTotalSize(start); //adds top/left/width/height values\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!end.size) {\n\t\t\t\t\t\t\t\t_getTotalSize(end);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toriginFactors = _parseOriginFactors(origins[0]);\n\t\t\t\t\t\t\tthis._origin = start.origin = {x:start.left + originFactors.x * start.width, y:start.top + originFactors.y * start.height};\n\t\t\t\t\t\t\tif (origins[1]) {\n\t\t\t\t\t\t\t\toriginFactors = _parseOriginFactors(origins[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._eOrigin = {x:end.left + originFactors.x * end.width, y:end.top + originFactors.y * end.height};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._rawPath = target._gsRawPath =  start;\n\n\t\t\t\t\t\tj = start.length;\n\t\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\t\tstartSeg = start[j];\n\t\t\t\t\t\t\tendSeg = end[j];\n\t\t\t\t\t\t\tstartSmooth = startSeg.isSmooth || [];\n\t\t\t\t\t\t\tendSmooth = endSeg.isSmooth || [];\n\t\t\t\t\t\t\tl = startSeg.length;\n\t\t\t\t\t\t\t_lastLinkedAnchor = 0; //reset; we use _lastLinkedAnchor in the _tweenRotation() method to help make sure that close points don't get ripped apart and rotate opposite directions. Typically we want to go the shortest direction, but if the previous anchor is going a different direction, we override this logic (within certain thresholds)\n\t\t\t\t\t\t\tfor (i = 0; i < l; i+=2) {\n\t\t\t\t\t\t\t\tif (endSeg[i] !== startSeg[i] || endSeg[i+1] !== startSeg[i+1]) {\n\t\t\t\t\t\t\t\t\tif (useRotation) {\n\t\t\t\t\t\t\t\t\t\tif (startSmooth[i] && endSmooth[i]) { //if BOTH starting and ending values are smooth (meaning control points have basically the same slope), interpolate the rotation and length instead of the coordinates (this is what makes things smooth).\n\t\t\t\t\t\t\t\t\t\t\tsData = startSeg.smoothData;\n\t\t\t\t\t\t\t\t\t\t\teData = endSeg.smoothData;\n\t\t\t\t\t\t\t\t\t\t\toffset = i + ((i === l - 4) ? 7 - l : 5); //helps us accommodate wrapping (like if the end and start anchors are identical and the control points are smooth).\n\t\t\t\t\t\t\t\t\t\t\tthis._controlPT = {_next:this._controlPT, i:i, j:j, l1s:sData[i+1], l1c:eData[i+1] - sData[i+1], l2s:sData[offset], l2c:eData[offset] - sData[offset]};\n\t\t\t\t\t\t\t\t\t\t\tpt = this._tweenRotation(startSeg, endSeg, i+2);\n\t\t\t\t\t\t\t\t\t\t\tthis._tweenRotation(startSeg, endSeg, i, pt);\n\t\t\t\t\t\t\t\t\t\t\tthis._tweenRotation(startSeg, endSeg, offset-1, pt);\n\t\t\t\t\t\t\t\t\t\t\ti+=4;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tthis._tweenRotation(startSeg, endSeg, i);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tthis._addTween(startSeg, i, startSeg[i], endSeg[i]);\n\t\t\t\t\t\t\t\t\t\tpt = this._addTween(startSeg, i+1, startSeg[i+1], endSeg[i+1]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt = this._addTween(target, \"setAttribute\", target.getAttribute(p) + \"\", shape + \"\", \"morphSVG\", false, p, _buildPointsFilter(shapeIndex));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (useRotation) {\n\t\t\t\t\t\tthis._addTween(this._origin, \"x\", this._origin.x, this._eOrigin.x);\n\t\t\t\t\t\tpt = this._addTween(this._origin, \"y\", this._origin.y, this._eOrigin.y);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pt) {\n\t\t\t\t\t\tthis._overwriteProps.push(\"morphSVG\");\n\t\t\t\t\t\tpt.end = shape;\n\t\t\t\t\t\tpt.endProp = p;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\tset: function(ratio) {\n\t\t\t\tvar rawPath = this._rawPath,\n\t\t\t\t\tcontrolPT = this._controlPT,\n\t\t\t\t\tanchorPT = this._anchorPT,\n\t\t\t\t\trnd = this._rnd,\n\t\t\t\t\ttarget = this._target,\n\t\t\t\t\ts, space, easeInOut, pt, segment, l, angle, i, j, x, y, sin, cos, offset;\n\t\t\t\tthis._super.setRatio.call(this, ratio);\n\t\t\t\tif (ratio === 1 && this._apply) {\n\t\t\t\t\tpt = this._firstPT;\n\t\t\t\t\twhile (pt) {\n\t\t\t\t\t\tif (pt.end) {\n\t\t\t\t\t\t\tif (this._prop) {\n\t\t\t\t\t\t\t\ttarget[this._prop] = pt.end;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttarget.setAttribute(pt.endProp, pt.end); //make sure the end value is exactly as specified (in case we had to add fabricated points during the tween)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt = pt._next;\n\t\t\t\t\t}\n\t\t\t\t} else if (rawPath) {\n\n\t\t\t\t\t//rotationally position the anchors\n\t\t\t\t\twhile (anchorPT) {\n\t\t\t\t\t\tangle = anchorPT.sa + ratio * anchorPT.ca;\n\t\t\t\t\t\tl = anchorPT.sl + ratio * anchorPT.cl;    //length\n\t\t\t\t\t\tanchorPT.t[anchorPT.i] = this._origin.x + _cos(angle) * l;\n\t\t\t\t\t\tanchorPT.t[anchorPT.i + 1] = this._origin.y + _sin(angle) * l;\n\t\t\t\t\t\tanchorPT = anchorPT._next;\n\t\t\t\t\t}\n\n\t\t\t\t\t//smooth out the control points\n\t\t\t\t\teaseInOut = ratio < 0.5 ? 2 * ratio * ratio : (4 - 2 * ratio) * ratio - 1;\n\t\t\t\t\twhile (controlPT) {\n\t\t\t\t\t\ti = controlPT.i;\n\t\t\t\t\t\tsegment = rawPath[controlPT.j];\n\t\t\t\t\t\toffset = i + ((i === segment.length - 4) ? 7 - segment.length : 5); //accommodates wrapping around of smooth points, like if the start and end anchors are on top of each other and their handles are smooth.\n\t\t\t\t\t\tangle = _atan2(segment[offset] - segment[i+1], segment[offset-1] - segment[i]); //average the angles\n\t\t\t\t\t\tsin = _sin(angle);\n\t\t\t\t\t\tcos = _cos(angle);\n\t\t\t\t\t\tx = segment[i+2];\n\t\t\t\t\t\ty = segment[i+3];\n\t\t\t\t\t\tl = controlPT.l1s + easeInOut * controlPT.l1c;    //length\n\t\t\t\t\t\tsegment[i] = x - cos * l;\n\t\t\t\t\t\tsegment[i+1] = y - sin * l;\n\t\t\t\t\t\tl = controlPT.l2s + easeInOut * controlPT.l2c;\n\t\t\t\t\t\tsegment[offset-1] = x + cos * l;\n\t\t\t\t\t\tsegment[offset] = y + sin * l;\n\t\t\t\t\t\tcontrolPT = controlPT._next;\n\t\t\t\t\t}\n\n\t\t\t\t\ttarget._gsRawPath = rawPath;\n\n\t\t\t\t\tif (this._apply) {\n\t\t\t\t\t\ts = \"\";\n\t\t\t\t\t\tspace = \" \";\n\t\t\t\t\t\tfor (j = 0; j < rawPath.length; j++) {\n\t\t\t\t\t\t\tsegment = rawPath[j];\n\t\t\t\t\t\t\tl = segment.length;\n\t\t\t\t\t\t\ts += \"M\" + (((segment[0] * rnd) | 0) / rnd) + space + (((segment[1] * rnd) | 0) / rnd) + \" C\";\n\t\t\t\t\t\t\tfor (i = 2; i < l; i++) { //this is actually faster than just doing a join() on the array, possibly because the numbers have so many decimal places\n\t\t\t\t\t\t\t\ts += (((segment[i] * rnd) | 0) / rnd) + space;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this._prop) {\n\t\t\t\t\t\t\ttarget[this._prop] = s;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget.setAttribute(\"d\", s);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._render && rawPath) {\n\t\t\t\t\tthis._render.call(this._tween, rawPath, target);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\n\tMorphSVGPlugin.prototype._tweenRotation = function(start, end, i, linkedPT) {\n\t\tvar so = this._origin,              //starting origin\n\t\t\teo = this._eOrigin,             //ending origin\n\t\t\tdx = start[i] - so.x,\n\t\t\tdy = start[i+1] - so.y,\n\t\t\td = _sqrt(dx * dx + dy * dy),   //length from starting origin to starting point\n\t\t\tsa = _atan2(dy, dx),\n\t\t\tangleDif, short;\n\t\tdx = end[i] - eo.x;\n\t\tdy = end[i+1] - eo.y;\n\t\tangleDif = _atan2(dy, dx) - sa;\n\t\tshort = _shortAngle(angleDif);\n\t\t//in the case of control points, we ALWAYS link them to their anchor so that they don't get torn apart and rotate the opposite direction. If it's not a control point, we look at the most recently linked point as long as they're within a certain rotational range of each other.\n\t\tif (!linkedPT && _lastLinkedAnchor && Math.abs(short + _lastLinkedAnchor.ca) < _angleMin) {\n\t\t\tlinkedPT = _lastLinkedAnchor;\n\t\t}\n\t\treturn (this._anchorPT = _lastLinkedAnchor = {\n\t\t\t_next:this._anchorPT,\n\t\t\tt:start,\n\t\t\tsa:sa,                              //starting angle\n\t\t\tca:(linkedPT && short * linkedPT.ca < 0 && Math.abs(short) > _angleMax) ? angleDif : short,  //change in angle\n\t\t\tsl:d,                               //starting length\n\t\t\tcl:_sqrt(dx * dx + dy * dy) - d,    //change in length\n\t\t\ti:i\n\t\t});\n\t};\n\n\tMorphSVGPlugin.pathFilter = _pathFilter;\n\tMorphSVGPlugin.pointsFilter = _pointsFilter;\n\tMorphSVGPlugin.getTotalSize = _getTotalSize;\n\tMorphSVGPlugin.subdivideRawBezier = MorphSVGPlugin.subdivideSegment = _subdivideSegment;\n\tMorphSVGPlugin.rawPathToString = _rawPathToString;\n\tMorphSVGPlugin.defaultType = \"linear\";\n\tMorphSVGPlugin.defaultUpdateTarget = true;\n\tMorphSVGPlugin.defaultMap = \"size\";\n\tMorphSVGPlugin.stringToRawPath = MorphSVGPlugin.pathDataToRawBezier = function(data) {\n\t\treturn _stringToRawPath(_parseShape(data, true));\n\t};\n\tMorphSVGPlugin.equalizeSegmentQuantity = _equalizeSegmentQuantity;\n\n\tMorphSVGPlugin.convertToPath = function(targets, swap) {\n\t\tif (typeof(targets) === \"string\") {\n\t\t\ttargets = TweenLite.selector(targets);\n\t\t}\n\t\tvar a = (!targets || targets.length === 0) ? [] : (targets.length && targets[0] && targets[0].nodeType) ? Array.prototype.slice.call(targets, 0) : [targets],\n\t\t\ti = a.length;\n\t\twhile (--i > -1) {\n\t\t\ta[i] = _convertToPath(a[i], (swap !== false));\n\t\t}\n\t\treturn a;\n\t};\n\n\tMorphSVGPlugin.pathDataToBezier = function(data, vars) { //converts SVG path data into an array of {x, y} objects that can be plugged directly into a bezier tween. You can optionally pass in a 2D matrix like [a, b, c, d, tx, ty] containing numbers that should transform each point.\n\t\tvar bezier = _stringToRawPath(_parseShape(data, true))[0] || [],\n\t\t\tprefix = 0,\n\t\t\ta, i, l, matrix, offsetX, offsetY, bbox, e;\n\t\tvars = vars || {};\n\t\te = vars.align || vars.relative;\n\t\tmatrix = vars.matrix || [1,0,0,1,0,0];\n\t\toffsetX = vars.offsetX || 0;\n\t\toffsetY = vars.offsetY || 0;\n\t\tif (e === \"relative\" || e === true) {\n\t\t\toffsetX -= bezier[0] * matrix[0] + bezier[1] * matrix[2];\n\t\t\toffsetY -= bezier[0] * matrix[1] + bezier[1] * matrix[3];\n\t\t\tprefix = \"+=\";\n\t\t} else {\n\t\t\toffsetX += matrix[4];\n\t\t\toffsetY += matrix[5];\n\t\t\tif (e) {\n\t\t\t\te = (typeof(e) === \"string\") ? TweenLite.selector(e) : (e && e[0]) ? e : [e]; //allow array-like objects like jQuery objects.\n\t\t\t\tif (e && e[0]) {\n\t\t\t\t\tbbox = e[0].getBBox() || {x:0, y:0};\n\t\t\t\t\toffsetX -= bbox.x;\n\t\t\t\t\toffsetY -= bbox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ta = [];\n\t\tl = bezier.length;\n\t\tif (matrix && matrix.join(\",\") !== \"1,0,0,1,0,0\") {\n\t\t\tfor (i = 0; i < l; i+=2) {\n\t\t\t\ta.push({x:prefix + (bezier[i] * matrix[0] + bezier[i+1] * matrix[2] + offsetX), y:prefix + (bezier[i] * matrix[1] + bezier[i+1] * matrix[3] + offsetY)});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = 0; i < l; i+=2) {\n\t\t\t\ta.push({x:prefix + (bezier[i] + offsetX), y:prefix + (bezier[i+1] + offsetY)});\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t};\n\n\n\nexport { MorphSVGPlugin, MorphSVGPlugin as default };"]}